CREATE database db_deliverycenter;

USE db_deliverycenter;

CREATE TABLE `db_deliverycenter`.`channels` (
  `channel_id` int DEFAULT NULL,
  `channel_name` text,
  `channel_type` text);

CREATE TABLE `db_deliverycenter`.`hubs` (
  `hub_id` int DEFAULT NULL,
  `hub_name` text,
  `hub_city` text,
  `hub_state` text,
  `hub_latitude` double DEFAULT NULL,
  `hub_longitude` double DEFAULT NULL);

CREATE TABLE `db_deliverycenter`.`stores` (
  `store_id` int DEFAULT NULL,
  `hub_id` int DEFAULT NULL,
  `store_name` text,
  `store_segment` text,
  `store_plan_price` int DEFAULT NULL,
  `store_latitude` text,
  `store_longitude` text);


CREATE TABLE `db_deliverycenter`.`drivers` (
  `driver_id` int DEFAULT NULL,
  `driver_modal` text,
  `driver_type` text);


CREATE TABLE `db_deliverycenter`.`deliveries` (
  `delivery_id` int DEFAULT NULL,
  `delivery_order_id` int DEFAULT NULL,
  `driver_id` int DEFAULT NULL,
  `delivery_distance_meters` int DEFAULT NULL,
  `delivery_status` text);


CREATE TABLE `db_deliverycenter`.`payments` (
  `payment_id` int DEFAULT NULL,
  `payment_order_id` int DEFAULT NULL,
  `payment_amount` double DEFAULT NULL,
  `payment_fee` double DEFAULT NULL,
  `payment_method` text,
  `payment_status` text);


CREATE TABLE `db_deliverycenter`.`orders` (
  `order_id` int DEFAULT NULL,
  `store_id` int DEFAULT NULL,
  `channel_id` int DEFAULT NULL,
  `payment_order_id` int DEFAULT NULL,
  `delivery_order_id` int DEFAULT NULL,
  `order_status` text,
  `order_amount` double DEFAULT NULL,
  `order_delivery_fee` int DEFAULT NULL,
  `order_delivery_cost` text,
  `order_created_hour` int DEFAULT NULL,
  `order_created_minute` int DEFAULT NULL,
  `order_created_day` int DEFAULT NULL,
  `order_created_month` int DEFAULT NULL,
  `order_created_year` int DEFAULT NULL,
  `order_moment_created` text,
  `order_moment_accepted` text,
  `order_moment_ready` text,
  `order_moment_collected` text,
  `order_moment_in_expedition` text,
  `order_moment_delivering` text,
  `order_moment_delivered` text,
  `order_moment_finished` text,
  `order_metric_collected_time` text,
  `order_metric_paused_time` text,
  `order_metric_production_time` text,
  `order_metric_walking_time` text,
  `order_metric_expediton_speed_time` text,
  `order_metric_transit_time` text,
  `order_metric_cycle_time` text);

-- 1)
select count(hub_city), hub_city 
from hubs 
group by hub_city;

-- 2)
select count(order_id)
from orders
group by order_status;

-- 3)
select count(s.store_id), h.hub_city from stores s
inner join hubs h
on s.hub_id = h.hub_id
group by h.hub_city;

-- 4)
select max(payment_amount), min(payment_amount) from payments;

-- 5)
select count(driver_type) 
from drivers
group by driver_type 
order by max(driver_type);

-- 6)
select avg(delivery_distance_meters)
from drivers as motoristas
inner join deliveries as entregas
on motoristas.driver_id = entregas.driver_id
group by driver_modal
limit 10;

-- 7)
SELECT s.store_id,s.store_name,
AVG(o.order_amount) AS qtd_media
FROM stores s
JOIN orders o ON s.store_id = o.store_id
GROUP BY s.store_id,s.store_name
ORDER BY qtd_media DESC;

-- 8)
select count(*) as pedidos_sem_associacao
from orders
where store_id is null;

-- 9)
select sum(o.order_amount) as pedido_total
from orders as o
inner join channels as c on o.channel_id = c.channel_id
where c.channel_name = 'FOOD PLACE';

-- 10)
select count(*) as cancelados
from payments
where payment_status = 'chargeback';

-- 11)
select avg(payment_amount) as cancelados_media
from payments
where payment_status = 'chargeback';

-- 12)
select payment_method, avg(payment_amount) as metodo_media
from payments
group by payment_method
order by metodo_media desc;

-- 13-)
select payment_method
from payments
group by payment_method
having avg(payment_amount) > 100;

-- 14)
select hubs.hub_state, stores.store_segment, channels.channel_type, avg(orders.order_amount) as qtd_media_pedidos from orders
left join stores on orders.store_id = stores.store_id
left join channels on orders.channel_id = channels.channel_id
left join hubs on stores.hub_id = hubs.hub_id
group by hubs.hub_state, stores.store_segment, channels.channel_type;

-- 15)
select hubs.hub_state, stores.store_segment, channels.channel_type from hubs
right join stores on hubs.hub_id = stores.hub_id
right join orders on stores.store_id = orders.store_id
right join channels on orders.channel_id = channels.channel_id
group by hubs.hub_state, stores.store_segment, channels.channel_type
having avg(orders.order_amount) > 450;
